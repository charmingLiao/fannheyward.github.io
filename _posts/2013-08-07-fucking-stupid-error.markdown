---
layout: post
title: "Fucking Stupid Error"
date: 2013-08-07 23:57
---

今天修改代码部署后造成线上服务出现严重错误，记一下这个教训。

```lua
function f1(user)
	local name = user:get('name')
	--
end

function f2(new_user)
	local name = user:get('name')
	--
end
```

出错原因：两个功能几乎一样的方法都要追加获取同一信息，f1 中获取正常；然后 **复制** 到 f2 中，如上代码，f2 根本没有 user，取值必然失败，但是由于 Lua 语言特性，这里 user 会被认为是一个全局变量，因此不存在语法等错误，只会在运行时报错，因为全局变量里也没有 user。

这次出错完全是自己疏忽大意造成的。

教训：

1. 即使是同样功能代码在不同地方用的时候也要再次确认正确性。
1. Lua 代码要杜绝全局变量，每次提交部署前要用 ZeroBraneStudio 进行分析检测，这次完全是大意而忘掉了检查。
1. 线上服务代码修改尽量多人 review。
1. 更新部署后出错，首先要怀疑最近提交的代码，并进行严格审查。今天出错后也第一时间 review 了代码改动，确认 f1 没问题后对 f2 的检查就放松了，非常不应该。
1. 应该回滚代码以优先保证线上服务正常。由于出错的不规律性，加上 review 代码的盲目自信，也确实是很简单的改动，就以为不是这个改动才引起的问题，所以没有及时回滚代码，很影响问题排查。
1. 出错后要尽量多的查看所有日志，以便定位问题。今天只检查了 nginx error.log, 忘记了 moochine log，再加上出错栈信息的误导，以为是另一个问题，思路完全跑偏。如果能及时看一下 moochine log 肯定可以很快解决。
1. 分析错误的时候思路要开阔，不要被某一个错误 log 牵着走，很有可能这个 log 只是其他问题引发的一个表象。
1. 自己一个人排查不定的时候尽快找其他人帮忙，其他人不会受自己思路影响，避免干扰，方便定位错误。这个算是今天唯一做对的一点。

是以为记。

